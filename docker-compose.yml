version: "3.8"
name: fullstack
services:
  database:
    container_name: database
    image: database:1.0.0
    build:
      context: .
      target: base
      dockerfile: ./database/Dockerfile
    env_file: .env
    environment:
      - TZ=America/Argentina/Buenos_Aires
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    restart: always
    ports:
      - ${DB_PORT}:5432
    volumes:
      - ./database/database/data:/var/lib/postgresql/data
      - ./database/backups:/backups
    extra_hosts:
      - host.docker.internal:host-gateway

  redis:
    container_name: redis
    image: "redis:alpine"
    restart: always

  backend:
    container_name: backend
    image: backend:1.0.0
    build:
      context: .
      target: base
      dockerfile: ./backend/Dockerfile
    command: bash /start.sh
    depends_on:
      - database
      - redis
    restart: always
    env_file: .env
    environment:
      # Configuracion DB
      - DB_HOST=host.docker.internal
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
    ports:
      - ${BACK_PORT}:3000
    volumes:
      - ./backend/backend:/app
      - ./backend/start.sh:/start.sh
    links:
      - redis
    extra_hosts:
      - host.docker.internal:host-gateway

  # frontend:
  #   container_name: frontend
  #   image: frontend:1.0.0
  #   build:
  #     context: .
  #     target: base
  #     dockerfile: ./frontend/Dockerfile
  #   command: bash /start.sh
  #   # depends_on:
  #   #   - backend
  #   restart: always
  #   env_file: .env
  #   environment:
  #     - PORT=${FRONT_PORT}
  #   ports:
  #     - ${FRONT_PORT}:${FRONT_PORT}
  #   volumes:
  #     - ./frontend/frontend:/app
  #     - ./frontend/start.sh:/start.sh
  #   extra_hosts:
  #     - host.docker.internal:host-gateway

  # rproxy:
  #   container_name: rproxy
  #   image: rproxy:1.0.0
  #   build:
  #     context: .
  #     target: base
  #     dockerfile: ./rproxy/Dockerfile
  #   command: bash /start.sh
  #   depends_on:
  #     - backend
  #     - frontend
  #   env_file: .env
  #   restart: always
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./rproxy/start.sh:/start.sh
  #     - ./rproxy/nginx.conf:/etc/nginx/sites-available/default
  #     - ./rproxy/nginx/letsencrypt:/etc/letsencrypt
  #     # Descomentar para guardar el log en el host
  #     # - ./rproxy/nginx/log:/var/log/nginx
  #   extra_hosts:
  #     - host.docker.internal:host-gateway
